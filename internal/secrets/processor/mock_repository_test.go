// Code generated by mockery v2.20.0. DO NOT EDIT.

package processor

import (
	context "context"

	entity "github.com/Albitko/secrets-armgour/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// mockRepository is an autogenerated mock type for the repository type
type mockRepository struct {
	mock.Mock
}

type mockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRepository) EXPECT() *mockRepository_Expecter {
	return &mockRepository_Expecter{mock: &_m.Mock}
}

// DeleteUserData provides a mock function with given fields: ctx, data, id
func (_m *mockRepository) DeleteUserData(ctx context.Context, data string, id string) error {
	ret := _m.Called(ctx, data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_DeleteUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserData'
type mockRepository_DeleteUserData_Call struct {
	*mock.Call
}

// DeleteUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - id string
func (_e *mockRepository_Expecter) DeleteUserData(ctx interface{}, data interface{}, id interface{}) *mockRepository_DeleteUserData_Call {
	return &mockRepository_DeleteUserData_Call{Call: _e.mock.On("DeleteUserData", ctx, data, id)}
}

func (_c *mockRepository_DeleteUserData_Call) Run(run func(ctx context.Context, data string, id string)) *mockRepository_DeleteUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_DeleteUserData_Call) Return(_a0 error) *mockRepository_DeleteUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_DeleteUserData_Call) RunAndReturn(run func(context.Context, string, string) error) *mockRepository_DeleteUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserData provides a mock function with given fields: ctx, data, id, user
func (_m *mockRepository) GetUserData(ctx context.Context, data string, id string, user string) (interface{}, error) {
	ret := _m.Called(ctx, data, id, user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (interface{}, error)); ok {
		return rf(ctx, data, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = rf(ctx, data, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, data, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRepository_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type mockRepository_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - id string
//   - user string
func (_e *mockRepository_Expecter) GetUserData(ctx interface{}, data interface{}, id interface{}, user interface{}) *mockRepository_GetUserData_Call {
	return &mockRepository_GetUserData_Call{Call: _e.mock.On("GetUserData", ctx, data, id, user)}
}

func (_c *mockRepository_GetUserData_Call) Run(run func(ctx context.Context, data string, id string, user string)) *mockRepository_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockRepository_GetUserData_Call) Return(_a0 interface{}, _a1 error) *mockRepository_GetUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRepository_GetUserData_Call) RunAndReturn(run func(context.Context, string, string, string) (interface{}, error)) *mockRepository_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserPasswordHash provides a mock function with given fields: ctx, login
func (_m *mockRepository) GetUserPasswordHash(ctx context.Context, login string) (string, error) {
	ret := _m.Called(ctx, login)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRepository_GetUserPasswordHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserPasswordHash'
type mockRepository_GetUserPasswordHash_Call struct {
	*mock.Call
}

// GetUserPasswordHash is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
func (_e *mockRepository_Expecter) GetUserPasswordHash(ctx interface{}, login interface{}) *mockRepository_GetUserPasswordHash_Call {
	return &mockRepository_GetUserPasswordHash_Call{Call: _e.mock.On("GetUserPasswordHash", ctx, login)}
}

func (_c *mockRepository_GetUserPasswordHash_Call) Run(run func(ctx context.Context, login string)) *mockRepository_GetUserPasswordHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockRepository_GetUserPasswordHash_Call) Return(_a0 string, _a1 error) *mockRepository_GetUserPasswordHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRepository_GetUserPasswordHash_Call) RunAndReturn(run func(context.Context, string) (string, error)) *mockRepository_GetUserPasswordHash_Call {
	_c.Call.Return(run)
	return _c
}

// InsertBinary provides a mock function with given fields: ctx, bin, data, user
func (_m *mockRepository) InsertBinary(ctx context.Context, bin entity.UserBinary, data []byte, user string) error {
	ret := _m.Called(ctx, bin, data, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserBinary, []byte, string) error); ok {
		r0 = rf(ctx, bin, data, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_InsertBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertBinary'
type mockRepository_InsertBinary_Call struct {
	*mock.Call
}

// InsertBinary is a helper method to define mock.On call
//   - ctx context.Context
//   - bin entity.UserBinary
//   - data []byte
//   - user string
func (_e *mockRepository_Expecter) InsertBinary(ctx interface{}, bin interface{}, data interface{}, user interface{}) *mockRepository_InsertBinary_Call {
	return &mockRepository_InsertBinary_Call{Call: _e.mock.On("InsertBinary", ctx, bin, data, user)}
}

func (_c *mockRepository_InsertBinary_Call) Run(run func(ctx context.Context, bin entity.UserBinary, data []byte, user string)) *mockRepository_InsertBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserBinary), args[2].([]byte), args[3].(string))
	})
	return _c
}

func (_c *mockRepository_InsertBinary_Call) Return(_a0 error) *mockRepository_InsertBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_InsertBinary_Call) RunAndReturn(run func(context.Context, entity.UserBinary, []byte, string) error) *mockRepository_InsertBinary_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCard provides a mock function with given fields: ctx, card, user
func (_m *mockRepository) InsertCard(ctx context.Context, card entity.UserCard, user string) error {
	ret := _m.Called(ctx, card, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCard, string) error); ok {
		r0 = rf(ctx, card, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_InsertCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCard'
type mockRepository_InsertCard_Call struct {
	*mock.Call
}

// InsertCard is a helper method to define mock.On call
//   - ctx context.Context
//   - card entity.UserCard
//   - user string
func (_e *mockRepository_Expecter) InsertCard(ctx interface{}, card interface{}, user interface{}) *mockRepository_InsertCard_Call {
	return &mockRepository_InsertCard_Call{Call: _e.mock.On("InsertCard", ctx, card, user)}
}

func (_c *mockRepository_InsertCard_Call) Run(run func(ctx context.Context, card entity.UserCard, user string)) *mockRepository_InsertCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserCard), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_InsertCard_Call) Return(_a0 error) *mockRepository_InsertCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_InsertCard_Call) RunAndReturn(run func(context.Context, entity.UserCard, string) error) *mockRepository_InsertCard_Call {
	_c.Call.Return(run)
	return _c
}

// InsertCredentials provides a mock function with given fields: ctx, credentials, user
func (_m *mockRepository) InsertCredentials(ctx context.Context, credentials entity.UserCredentials, user string) error {
	ret := _m.Called(ctx, credentials, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCredentials, string) error); ok {
		r0 = rf(ctx, credentials, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_InsertCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertCredentials'
type mockRepository_InsertCredentials_Call struct {
	*mock.Call
}

// InsertCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - credentials entity.UserCredentials
//   - user string
func (_e *mockRepository_Expecter) InsertCredentials(ctx interface{}, credentials interface{}, user interface{}) *mockRepository_InsertCredentials_Call {
	return &mockRepository_InsertCredentials_Call{Call: _e.mock.On("InsertCredentials", ctx, credentials, user)}
}

func (_c *mockRepository_InsertCredentials_Call) Run(run func(ctx context.Context, credentials entity.UserCredentials, user string)) *mockRepository_InsertCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserCredentials), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_InsertCredentials_Call) Return(_a0 error) *mockRepository_InsertCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_InsertCredentials_Call) RunAndReturn(run func(context.Context, entity.UserCredentials, string) error) *mockRepository_InsertCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// InsertText provides a mock function with given fields: ctx, text, user
func (_m *mockRepository) InsertText(ctx context.Context, text entity.UserText, user string) error {
	ret := _m.Called(ctx, text, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserText, string) error); ok {
		r0 = rf(ctx, text, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_InsertText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InsertText'
type mockRepository_InsertText_Call struct {
	*mock.Call
}

// InsertText is a helper method to define mock.On call
//   - ctx context.Context
//   - text entity.UserText
//   - user string
func (_e *mockRepository_Expecter) InsertText(ctx interface{}, text interface{}, user interface{}) *mockRepository_InsertText_Call {
	return &mockRepository_InsertText_Call{Call: _e.mock.On("InsertText", ctx, text, user)}
}

func (_c *mockRepository_InsertText_Call) Run(run func(ctx context.Context, text entity.UserText, user string)) *mockRepository_InsertText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserText), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_InsertText_Call) Return(_a0 error) *mockRepository_InsertText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_InsertText_Call) RunAndReturn(run func(context.Context, entity.UserText, string) error) *mockRepository_InsertText_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, login, pass
func (_m *mockRepository) RegisterUser(ctx context.Context, login string, pass string) error {
	ret := _m.Called(ctx, login, pass)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, login, pass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type mockRepository_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - login string
//   - pass string
func (_e *mockRepository_Expecter) RegisterUser(ctx interface{}, login interface{}, pass interface{}) *mockRepository_RegisterUser_Call {
	return &mockRepository_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, login, pass)}
}

func (_c *mockRepository_RegisterUser_Call) Run(run func(ctx context.Context, login string, pass string)) *mockRepository_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_RegisterUser_Call) Return(_a0 error) *mockRepository_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_RegisterUser_Call) RunAndReturn(run func(context.Context, string, string) error) *mockRepository_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// SelectUserData provides a mock function with given fields: ctx, data, string
func (_m *mockRepository) SelectUserData(ctx context.Context, data string, s string) (interface{}, error) {
	ret := _m.Called(ctx, data, s)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, data, s)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, data, s)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, data, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRepository_SelectUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectUserData'
type mockRepository_SelectUserData_Call struct {
	*mock.Call
}

// SelectUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - string string
func (_e *mockRepository_Expecter) SelectUserData(ctx interface{}, data interface{}, string interface{}) *mockRepository_SelectUserData_Call {
	return &mockRepository_SelectUserData_Call{Call: _e.mock.On("SelectUserData", ctx, data, string)}
}

func (_c *mockRepository_SelectUserData_Call) Run(run func(ctx context.Context, data string, string string)) *mockRepository_SelectUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockRepository_SelectUserData_Call) Return(_a0 interface{}, _a1 error) *mockRepository_SelectUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRepository_SelectUserData_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *mockRepository_SelectUserData_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBinary provides a mock function with given fields: ctx, index, bin, data
func (_m *mockRepository) UpdateBinary(ctx context.Context, index int, bin entity.UserBinary, data []byte) error {
	ret := _m.Called(ctx, index, bin, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.UserBinary, []byte) error); ok {
		r0 = rf(ctx, index, bin, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_UpdateBinary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBinary'
type mockRepository_UpdateBinary_Call struct {
	*mock.Call
}

// UpdateBinary is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
//   - bin entity.UserBinary
//   - data []byte
func (_e *mockRepository_Expecter) UpdateBinary(ctx interface{}, index interface{}, bin interface{}, data interface{}) *mockRepository_UpdateBinary_Call {
	return &mockRepository_UpdateBinary_Call{Call: _e.mock.On("UpdateBinary", ctx, index, bin, data)}
}

func (_c *mockRepository_UpdateBinary_Call) Run(run func(ctx context.Context, index int, bin entity.UserBinary, data []byte)) *mockRepository_UpdateBinary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(entity.UserBinary), args[3].([]byte))
	})
	return _c
}

func (_c *mockRepository_UpdateBinary_Call) Return(_a0 error) *mockRepository_UpdateBinary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_UpdateBinary_Call) RunAndReturn(run func(context.Context, int, entity.UserBinary, []byte) error) *mockRepository_UpdateBinary_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCard provides a mock function with given fields: ctx, index, card
func (_m *mockRepository) UpdateCard(ctx context.Context, index int, card entity.UserCard) error {
	ret := _m.Called(ctx, index, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.UserCard) error); ok {
		r0 = rf(ctx, index, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_UpdateCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCard'
type mockRepository_UpdateCard_Call struct {
	*mock.Call
}

// UpdateCard is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
//   - card entity.UserCard
func (_e *mockRepository_Expecter) UpdateCard(ctx interface{}, index interface{}, card interface{}) *mockRepository_UpdateCard_Call {
	return &mockRepository_UpdateCard_Call{Call: _e.mock.On("UpdateCard", ctx, index, card)}
}

func (_c *mockRepository_UpdateCard_Call) Run(run func(ctx context.Context, index int, card entity.UserCard)) *mockRepository_UpdateCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(entity.UserCard))
	})
	return _c
}

func (_c *mockRepository_UpdateCard_Call) Return(_a0 error) *mockRepository_UpdateCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_UpdateCard_Call) RunAndReturn(run func(context.Context, int, entity.UserCard) error) *mockRepository_UpdateCard_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCredentials provides a mock function with given fields: ctx, index, credentials
func (_m *mockRepository) UpdateCredentials(ctx context.Context, index int, credentials entity.UserCredentials) error {
	ret := _m.Called(ctx, index, credentials)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.UserCredentials) error); ok {
		r0 = rf(ctx, index, credentials)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_UpdateCredentials_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCredentials'
type mockRepository_UpdateCredentials_Call struct {
	*mock.Call
}

// UpdateCredentials is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
//   - credentials entity.UserCredentials
func (_e *mockRepository_Expecter) UpdateCredentials(ctx interface{}, index interface{}, credentials interface{}) *mockRepository_UpdateCredentials_Call {
	return &mockRepository_UpdateCredentials_Call{Call: _e.mock.On("UpdateCredentials", ctx, index, credentials)}
}

func (_c *mockRepository_UpdateCredentials_Call) Run(run func(ctx context.Context, index int, credentials entity.UserCredentials)) *mockRepository_UpdateCredentials_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(entity.UserCredentials))
	})
	return _c
}

func (_c *mockRepository_UpdateCredentials_Call) Return(_a0 error) *mockRepository_UpdateCredentials_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_UpdateCredentials_Call) RunAndReturn(run func(context.Context, int, entity.UserCredentials) error) *mockRepository_UpdateCredentials_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateText provides a mock function with given fields: ctx, index, text
func (_m *mockRepository) UpdateText(ctx context.Context, index int, text entity.UserText) error {
	ret := _m.Called(ctx, index, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.UserText) error); ok {
		r0 = rf(ctx, index, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRepository_UpdateText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateText'
type mockRepository_UpdateText_Call struct {
	*mock.Call
}

// UpdateText is a helper method to define mock.On call
//   - ctx context.Context
//   - index int
//   - text entity.UserText
func (_e *mockRepository_Expecter) UpdateText(ctx interface{}, index interface{}, text interface{}) *mockRepository_UpdateText_Call {
	return &mockRepository_UpdateText_Call{Call: _e.mock.On("UpdateText", ctx, index, text)}
}

func (_c *mockRepository_UpdateText_Call) Run(run func(ctx context.Context, index int, text entity.UserText)) *mockRepository_UpdateText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(entity.UserText))
	})
	return _c
}

func (_c *mockRepository_UpdateText_Call) Return(_a0 error) *mockRepository_UpdateText_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRepository_UpdateText_Call) RunAndReturn(run func(context.Context, int, entity.UserText) error) *mockRepository_UpdateText_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockRepository creates a new instance of mockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockRepository(t mockConstructorTestingTnewMockRepository) *mockRepository {
	mock := &mockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.20.0. DO NOT EDIT.

package handler

import (
	context "context"

	entity "github.com/Albitko/secrets-armgour/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// mockSecretsProcessor is an autogenerated mock type for the secretsProcessor type
type mockSecretsProcessor struct {
	mock.Mock
}

type mockSecretsProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *mockSecretsProcessor) EXPECT() *mockSecretsProcessor_Expecter {
	return &mockSecretsProcessor_Expecter{mock: &_m.Mock}
}

// BinaryCreation provides a mock function with given fields: ctx, binary, user
func (_m *mockSecretsProcessor) BinaryCreation(ctx context.Context, binary entity.UserBinary, user string) error {
	ret := _m.Called(ctx, binary, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserBinary, string) error); ok {
		r0 = rf(ctx, binary, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_BinaryCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BinaryCreation'
type mockSecretsProcessor_BinaryCreation_Call struct {
	*mock.Call
}

// BinaryCreation is a helper method to define mock.On call
//   - ctx context.Context
//   - binary entity.UserBinary
//   - user string
func (_e *mockSecretsProcessor_Expecter) BinaryCreation(ctx interface{}, binary interface{}, user interface{}) *mockSecretsProcessor_BinaryCreation_Call {
	return &mockSecretsProcessor_BinaryCreation_Call{Call: _e.mock.On("BinaryCreation", ctx, binary, user)}
}

func (_c *mockSecretsProcessor_BinaryCreation_Call) Run(run func(ctx context.Context, binary entity.UserBinary, user string)) *mockSecretsProcessor_BinaryCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserBinary), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_BinaryCreation_Call) Return(_a0 error) *mockSecretsProcessor_BinaryCreation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_BinaryCreation_Call) RunAndReturn(run func(context.Context, entity.UserBinary, string) error) *mockSecretsProcessor_BinaryCreation_Call {
	_c.Call.Return(run)
	return _c
}

// BinaryEdit provides a mock function with given fields: ctx, index, binary
func (_m *mockSecretsProcessor) BinaryEdit(ctx context.Context, index string, binary entity.UserBinary) error {
	ret := _m.Called(ctx, index, binary)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserBinary) error); ok {
		r0 = rf(ctx, index, binary)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_BinaryEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BinaryEdit'
type mockSecretsProcessor_BinaryEdit_Call struct {
	*mock.Call
}

// BinaryEdit is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - binary entity.UserBinary
func (_e *mockSecretsProcessor_Expecter) BinaryEdit(ctx interface{}, index interface{}, binary interface{}) *mockSecretsProcessor_BinaryEdit_Call {
	return &mockSecretsProcessor_BinaryEdit_Call{Call: _e.mock.On("BinaryEdit", ctx, index, binary)}
}

func (_c *mockSecretsProcessor_BinaryEdit_Call) Run(run func(ctx context.Context, index string, binary entity.UserBinary)) *mockSecretsProcessor_BinaryEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserBinary))
	})
	return _c
}

func (_c *mockSecretsProcessor_BinaryEdit_Call) Return(_a0 error) *mockSecretsProcessor_BinaryEdit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_BinaryEdit_Call) RunAndReturn(run func(context.Context, string, entity.UserBinary) error) *mockSecretsProcessor_BinaryEdit_Call {
	_c.Call.Return(run)
	return _c
}

// CardCreation provides a mock function with given fields: ctx, card, user
func (_m *mockSecretsProcessor) CardCreation(ctx context.Context, card entity.UserCard, user string) error {
	ret := _m.Called(ctx, card, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCard, string) error); ok {
		r0 = rf(ctx, card, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_CardCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CardCreation'
type mockSecretsProcessor_CardCreation_Call struct {
	*mock.Call
}

// CardCreation is a helper method to define mock.On call
//   - ctx context.Context
//   - card entity.UserCard
//   - user string
func (_e *mockSecretsProcessor_Expecter) CardCreation(ctx interface{}, card interface{}, user interface{}) *mockSecretsProcessor_CardCreation_Call {
	return &mockSecretsProcessor_CardCreation_Call{Call: _e.mock.On("CardCreation", ctx, card, user)}
}

func (_c *mockSecretsProcessor_CardCreation_Call) Run(run func(ctx context.Context, card entity.UserCard, user string)) *mockSecretsProcessor_CardCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserCard), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_CardCreation_Call) Return(_a0 error) *mockSecretsProcessor_CardCreation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_CardCreation_Call) RunAndReturn(run func(context.Context, entity.UserCard, string) error) *mockSecretsProcessor_CardCreation_Call {
	_c.Call.Return(run)
	return _c
}

// CardEdit provides a mock function with given fields: ctx, index, card
func (_m *mockSecretsProcessor) CardEdit(ctx context.Context, index string, card entity.UserCard) error {
	ret := _m.Called(ctx, index, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserCard) error); ok {
		r0 = rf(ctx, index, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_CardEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CardEdit'
type mockSecretsProcessor_CardEdit_Call struct {
	*mock.Call
}

// CardEdit is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - card entity.UserCard
func (_e *mockSecretsProcessor_Expecter) CardEdit(ctx interface{}, index interface{}, card interface{}) *mockSecretsProcessor_CardEdit_Call {
	return &mockSecretsProcessor_CardEdit_Call{Call: _e.mock.On("CardEdit", ctx, index, card)}
}

func (_c *mockSecretsProcessor_CardEdit_Call) Run(run func(ctx context.Context, index string, card entity.UserCard)) *mockSecretsProcessor_CardEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserCard))
	})
	return _c
}

func (_c *mockSecretsProcessor_CardEdit_Call) Return(_a0 error) *mockSecretsProcessor_CardEdit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_CardEdit_Call) RunAndReturn(run func(context.Context, string, entity.UserCard) error) *mockSecretsProcessor_CardEdit_Call {
	_c.Call.Return(run)
	return _c
}

// CredentialsCreation provides a mock function with given fields: ctx, text, user
func (_m *mockSecretsProcessor) CredentialsCreation(ctx context.Context, text entity.UserCredentials, user string) error {
	ret := _m.Called(ctx, text, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCredentials, string) error); ok {
		r0 = rf(ctx, text, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_CredentialsCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CredentialsCreation'
type mockSecretsProcessor_CredentialsCreation_Call struct {
	*mock.Call
}

// CredentialsCreation is a helper method to define mock.On call
//   - ctx context.Context
//   - text entity.UserCredentials
//   - user string
func (_e *mockSecretsProcessor_Expecter) CredentialsCreation(ctx interface{}, text interface{}, user interface{}) *mockSecretsProcessor_CredentialsCreation_Call {
	return &mockSecretsProcessor_CredentialsCreation_Call{Call: _e.mock.On("CredentialsCreation", ctx, text, user)}
}

func (_c *mockSecretsProcessor_CredentialsCreation_Call) Run(run func(ctx context.Context, text entity.UserCredentials, user string)) *mockSecretsProcessor_CredentialsCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserCredentials), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_CredentialsCreation_Call) Return(_a0 error) *mockSecretsProcessor_CredentialsCreation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_CredentialsCreation_Call) RunAndReturn(run func(context.Context, entity.UserCredentials, string) error) *mockSecretsProcessor_CredentialsCreation_Call {
	_c.Call.Return(run)
	return _c
}

// CredentialsEdit provides a mock function with given fields: ctx, index, text
func (_m *mockSecretsProcessor) CredentialsEdit(ctx context.Context, index string, text entity.UserCredentials) error {
	ret := _m.Called(ctx, index, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserCredentials) error); ok {
		r0 = rf(ctx, index, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_CredentialsEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CredentialsEdit'
type mockSecretsProcessor_CredentialsEdit_Call struct {
	*mock.Call
}

// CredentialsEdit is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - text entity.UserCredentials
func (_e *mockSecretsProcessor_Expecter) CredentialsEdit(ctx interface{}, index interface{}, text interface{}) *mockSecretsProcessor_CredentialsEdit_Call {
	return &mockSecretsProcessor_CredentialsEdit_Call{Call: _e.mock.On("CredentialsEdit", ctx, index, text)}
}

func (_c *mockSecretsProcessor_CredentialsEdit_Call) Run(run func(ctx context.Context, index string, text entity.UserCredentials)) *mockSecretsProcessor_CredentialsEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserCredentials))
	})
	return _c
}

func (_c *mockSecretsProcessor_CredentialsEdit_Call) Return(_a0 error) *mockSecretsProcessor_CredentialsEdit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_CredentialsEdit_Call) RunAndReturn(run func(context.Context, string, entity.UserCredentials) error) *mockSecretsProcessor_CredentialsEdit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUserData provides a mock function with given fields: ctx, data, id
func (_m *mockSecretsProcessor) DeleteUserData(ctx context.Context, data string, id string) error {
	ret := _m.Called(ctx, data, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, data, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_DeleteUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUserData'
type mockSecretsProcessor_DeleteUserData_Call struct {
	*mock.Call
}

// DeleteUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - id string
func (_e *mockSecretsProcessor_Expecter) DeleteUserData(ctx interface{}, data interface{}, id interface{}) *mockSecretsProcessor_DeleteUserData_Call {
	return &mockSecretsProcessor_DeleteUserData_Call{Call: _e.mock.On("DeleteUserData", ctx, data, id)}
}

func (_c *mockSecretsProcessor_DeleteUserData_Call) Run(run func(ctx context.Context, data string, id string)) *mockSecretsProcessor_DeleteUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_DeleteUserData_Call) Return(_a0 error) *mockSecretsProcessor_DeleteUserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_DeleteUserData_Call) RunAndReturn(run func(context.Context, string, string) error) *mockSecretsProcessor_DeleteUserData_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserData provides a mock function with given fields: ctx, data, id, user
func (_m *mockSecretsProcessor) GetUserData(ctx context.Context, data string, id string, user string) (interface{}, error) {
	ret := _m.Called(ctx, data, id, user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (interface{}, error)); ok {
		return rf(ctx, data, id, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) interface{}); ok {
		r0 = rf(ctx, data, id, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, data, id, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSecretsProcessor_GetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserData'
type mockSecretsProcessor_GetUserData_Call struct {
	*mock.Call
}

// GetUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - id string
//   - user string
func (_e *mockSecretsProcessor_Expecter) GetUserData(ctx interface{}, data interface{}, id interface{}, user interface{}) *mockSecretsProcessor_GetUserData_Call {
	return &mockSecretsProcessor_GetUserData_Call{Call: _e.mock.On("GetUserData", ctx, data, id, user)}
}

func (_c *mockSecretsProcessor_GetUserData_Call) Run(run func(ctx context.Context, data string, id string, user string)) *mockSecretsProcessor_GetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_GetUserData_Call) Return(_a0 interface{}, _a1 error) *mockSecretsProcessor_GetUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSecretsProcessor_GetUserData_Call) RunAndReturn(run func(context.Context, string, string, string) (interface{}, error)) *mockSecretsProcessor_GetUserData_Call {
	_c.Call.Return(run)
	return _c
}

// ListUserData provides a mock function with given fields: ctx, data, user
func (_m *mockSecretsProcessor) ListUserData(ctx context.Context, data string, user string) (interface{}, error) {
	ret := _m.Called(ctx, data, user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (interface{}, error)); ok {
		return rf(ctx, data, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) interface{}); ok {
		r0 = rf(ctx, data, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, data, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockSecretsProcessor_ListUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUserData'
type mockSecretsProcessor_ListUserData_Call struct {
	*mock.Call
}

// ListUserData is a helper method to define mock.On call
//   - ctx context.Context
//   - data string
//   - user string
func (_e *mockSecretsProcessor_Expecter) ListUserData(ctx interface{}, data interface{}, user interface{}) *mockSecretsProcessor_ListUserData_Call {
	return &mockSecretsProcessor_ListUserData_Call{Call: _e.mock.On("ListUserData", ctx, data, user)}
}

func (_c *mockSecretsProcessor_ListUserData_Call) Run(run func(ctx context.Context, data string, user string)) *mockSecretsProcessor_ListUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_ListUserData_Call) Return(_a0 interface{}, _a1 error) *mockSecretsProcessor_ListUserData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockSecretsProcessor_ListUserData_Call) RunAndReturn(run func(context.Context, string, string) (interface{}, error)) *mockSecretsProcessor_ListUserData_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function with given fields: ctx, auth
func (_m *mockSecretsProcessor) LoginUser(ctx context.Context, auth entity.UserAuth) error {
	ret := _m.Called(ctx, auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserAuth) error); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type mockSecretsProcessor_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx context.Context
//   - auth entity.UserAuth
func (_e *mockSecretsProcessor_Expecter) LoginUser(ctx interface{}, auth interface{}) *mockSecretsProcessor_LoginUser_Call {
	return &mockSecretsProcessor_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, auth)}
}

func (_c *mockSecretsProcessor_LoginUser_Call) Run(run func(ctx context.Context, auth entity.UserAuth)) *mockSecretsProcessor_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserAuth))
	})
	return _c
}

func (_c *mockSecretsProcessor_LoginUser_Call) Return(_a0 error) *mockSecretsProcessor_LoginUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_LoginUser_Call) RunAndReturn(run func(context.Context, entity.UserAuth) error) *mockSecretsProcessor_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterUser provides a mock function with given fields: ctx, auth
func (_m *mockSecretsProcessor) RegisterUser(ctx context.Context, auth entity.UserAuth) error {
	ret := _m.Called(ctx, auth)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserAuth) error); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_RegisterUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterUser'
type mockSecretsProcessor_RegisterUser_Call struct {
	*mock.Call
}

// RegisterUser is a helper method to define mock.On call
//   - ctx context.Context
//   - auth entity.UserAuth
func (_e *mockSecretsProcessor_Expecter) RegisterUser(ctx interface{}, auth interface{}) *mockSecretsProcessor_RegisterUser_Call {
	return &mockSecretsProcessor_RegisterUser_Call{Call: _e.mock.On("RegisterUser", ctx, auth)}
}

func (_c *mockSecretsProcessor_RegisterUser_Call) Run(run func(ctx context.Context, auth entity.UserAuth)) *mockSecretsProcessor_RegisterUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserAuth))
	})
	return _c
}

func (_c *mockSecretsProcessor_RegisterUser_Call) Return(_a0 error) *mockSecretsProcessor_RegisterUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_RegisterUser_Call) RunAndReturn(run func(context.Context, entity.UserAuth) error) *mockSecretsProcessor_RegisterUser_Call {
	_c.Call.Return(run)
	return _c
}

// TextCreation provides a mock function with given fields: ctx, text, user
func (_m *mockSecretsProcessor) TextCreation(ctx context.Context, text entity.UserText, user string) error {
	ret := _m.Called(ctx, text, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserText, string) error); ok {
		r0 = rf(ctx, text, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_TextCreation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextCreation'
type mockSecretsProcessor_TextCreation_Call struct {
	*mock.Call
}

// TextCreation is a helper method to define mock.On call
//   - ctx context.Context
//   - text entity.UserText
//   - user string
func (_e *mockSecretsProcessor_Expecter) TextCreation(ctx interface{}, text interface{}, user interface{}) *mockSecretsProcessor_TextCreation_Call {
	return &mockSecretsProcessor_TextCreation_Call{Call: _e.mock.On("TextCreation", ctx, text, user)}
}

func (_c *mockSecretsProcessor_TextCreation_Call) Run(run func(ctx context.Context, text entity.UserText, user string)) *mockSecretsProcessor_TextCreation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserText), args[2].(string))
	})
	return _c
}

func (_c *mockSecretsProcessor_TextCreation_Call) Return(_a0 error) *mockSecretsProcessor_TextCreation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_TextCreation_Call) RunAndReturn(run func(context.Context, entity.UserText, string) error) *mockSecretsProcessor_TextCreation_Call {
	_c.Call.Return(run)
	return _c
}

// TextEdit provides a mock function with given fields: ctx, index, text
func (_m *mockSecretsProcessor) TextEdit(ctx context.Context, index string, text entity.UserText) error {
	ret := _m.Called(ctx, index, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserText) error); ok {
		r0 = rf(ctx, index, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockSecretsProcessor_TextEdit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TextEdit'
type mockSecretsProcessor_TextEdit_Call struct {
	*mock.Call
}

// TextEdit is a helper method to define mock.On call
//   - ctx context.Context
//   - index string
//   - text entity.UserText
func (_e *mockSecretsProcessor_Expecter) TextEdit(ctx interface{}, index interface{}, text interface{}) *mockSecretsProcessor_TextEdit_Call {
	return &mockSecretsProcessor_TextEdit_Call{Call: _e.mock.On("TextEdit", ctx, index, text)}
}

func (_c *mockSecretsProcessor_TextEdit_Call) Run(run func(ctx context.Context, index string, text entity.UserText)) *mockSecretsProcessor_TextEdit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserText))
	})
	return _c
}

func (_c *mockSecretsProcessor_TextEdit_Call) Return(_a0 error) *mockSecretsProcessor_TextEdit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockSecretsProcessor_TextEdit_Call) RunAndReturn(run func(context.Context, string, entity.UserText) error) *mockSecretsProcessor_TextEdit_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTnewMockSecretsProcessor interface {
	mock.TestingT
	Cleanup(func())
}

// newMockSecretsProcessor creates a new instance of mockSecretsProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockSecretsProcessor(t mockConstructorTestingTnewMockSecretsProcessor) *mockSecretsProcessor {
	mock := &mockSecretsProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
